options
{
  LOOKAHEAD= 1;

  FORCE_LA_CHECK = true;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  DEBUG_PARSER = true;
  TRACK_TOKENS = true;
  TOKEN_EXTENDS = "progen.Entity";
  NODE_CLASS = "progen.ProgenNode";
  NODE_EXTENDS = "progen.Entity";
  MULTI = true;
  VISITOR = true;
  STATIC = false;
  NODE_DEFAULT_VOID = true;
  NODE_SCOPE_HOOK = true;
}

PARSER_BEGIN(MiniJava)
package minijavaparser;
import java.io.*;
import java.util.*;
import progen.*;

public class MiniJava
{
  public void setTabSize(int size)
  {
    jj_input_stream.setTabSize(size);
  }

  public int getTabSize()
  {
    return jj_input_stream.getTabSize(0);
  }

  static void jjtreeOpenNodeScope(Node n)
  {
    ((ProgenNode) n).setSymbolTable(null);
  }

  static void jjtreeCloseNodeScope(Node n)
  {
  }
}

PARSER_END(MiniJava)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* KEYWORDS */
{
  < CLASS : "class" >
| < PUBLIC : "public" >
| < STATIC : "static" >
| < VOID : "void" >
| < MAIN : "main" >
| < STRING : "String" >
| < EXTENDS : "extends" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < PRINTLN : "System.out.println" >
| < RETURN : "return" >
| < INT : "int" >
| < BOOLEAN : "boolean" >
| < LENGTH : "length" >
| < TRUE : "true" >
| < FALSE : "false" >
| < THIS : "this" >
| < NEW : "new" >
}

TOKEN : /* IDENTIFIERS */
{
  < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| 
  < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /* LITERALS */
{
  < INT_LITERAL : ("-")? (< DIGIT >)+ >
| 
  < STRING_LITERAL :
    "\""
    (
      (
        "\\"
        (
          "\\"
        | "n"
        | "r"
        | "\""
        )
      )
    | ~[ "\\", "\n", "\r", "\"" ]
    )*
    "\"" >
}

TOKEN : /* OPERATORS */
{
  < BINARYOP1 : [ "+", "-" ] >
| 
  < BINARYOP2 : [ "*", "/" ] >
| 
  < ASSIGNOPERATOR : "=" >
| 
  < NOTOPERATOR : "!" >
| 
  < COMPARATOR :
    (
      "=="
    | "!="
    | "<"
    | "<="
    | ">"
    | ">="
    ) >
| 
  < LOGICOP1 : ("||") >
| 
  < LOGICOP2 : ("&&") >
| 
  < DOT : "." >
}

TOKEN : /* SEPARATORS */
{
  < LBRACKET : "[" >
| < RBRACKET : "]" >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < LACCOLADE : "{" >
| < RACCOLADE : "}" >
| < COMMA : "," >
| < SEMICOLON : ";" >
}

ASTProgram Program() #Program :
{}
{
  MainClass()
  (
    ClassDecl()
  )*
  < EOF >
  {
    return jjtThis;
  }
}

void MainClass() #MainClass :
{}
{
  < CLASS > ClassName() < LACCOLADE > < PUBLIC > < STATIC > < VOID > < MAIN > < LPAREN > (< STRING > < LBRACKET > < RBRACKET > < ID >)? < RPAREN > 
  MethodBody() 
  < RACCOLADE >
}

void ClassDecl() #ClassDeclaration :
{}
{
  < CLASS > ClassName() (< EXTENDS > ClassName())? < LACCOLADE >
  (
    MethodDecl()
  | VarDecl()
  )*
  < RACCOLADE >
}

void MethodDecl() #MethodDeclaration :
{}
{
  < PUBLIC > (< STATIC > { jjtThis.isStatic = true; })? ReturnType() FuncName() < LPAREN >
  (
    ParamDecl()
  )?
  (
    < COMMA > ParamDecl()
  )*
  < RPAREN > 
  MethodBody()
}

void MethodBody() :
{}
{
  < LACCOLADE >
  (
    LOOKAHEAD(2)
    VarDecl()
  | Statement()
  )*
  < RACCOLADE >
}

void ReturnType() :
{}
{
  (
    < VOID >
  | VarType()
  )
}

void VarType() :
{}
{
  (
    < STRING >
  | < BOOLEAN >
  | < INT >
  | ClassName()
  )
}

void ParamDecl() #ParameterDeclaration :
{}
{
  VarType() VarName()
}

void VarDecl() #VariableDeclaration :
{}
{
  VarType() VarName() < SEMICOLON >
}

void Statement() :
{}
{
  (
    < LACCOLADE >
    (
      Statement()
    )*
    < RACCOLADE >
  ) #BlockStatement
| (< IF > < LPAREN > Expr() < RPAREN > Statement() (< ELSE > Statement()) ?) #IfStatement
| (< WHILE > < LPAREN > Expr() < RPAREN > Statement()) #WhileStatement
| (< PRINTLN > < LPAREN > Expr() < RPAREN > < SEMICOLON >) #PrintStatement
| (Expr() < ASSIGNOPERATOR > Expr() < SEMICOLON >) #AssignmentStatement
| (< RETURN > (Expr()) ? < SEMICOLON >) #ReturnStatement
}

void LogicalExpr1() :
{}
{
  LogicalExpr2()
  (
    < LOGICOP1 >
    Expr()
  )*
}

void LogicalExpr2() :
{}
{
  CmpExpr()
  (
    < LOGICOP2 > Expr()
  )*
}

void CmpExpr() :
{}
{
  BinaryExpr1()
  (
    < COMPARATOR > Expr()
  )*
}

void BinaryExpr1() :
{}
{
  BinaryExpr2()
  (
    < BINARYOP1 > Expr()
  )*
}

void BinaryExpr2() :
{}
{
  PostExpr()
  (
    < BINARYOP2 > Expr()
  )*
}

void CallArgList() :
{}
{
  (
    < LPAREN >
    (
      Expr()
      (
        < COMMA > Expr()
      )*
    )?
    < RPAREN >
  )
}

void PostExpr() :
{}
{
  PrimaryExpr()
  (
    (
      < LBRACKET > Expr() < RBRACKET >
    )
  |
    (
      < DOT >
      (
        < LENGTH >
      |
        (
          < ID >
          (
            CallArgList()
          )?
        )
      )
    )
  | CallArgList()
  )?
}

void PrimaryExpr() :
{}
{
  (
    < TRUE >
  | < FALSE >
  | < ID >
  | < THIS >
  | < INT_LITERAL >
  | < STRING_LITERAL >
  )
|
  (
    < NOTOPERATOR > Expr()
  ) #LogicalNegationExpression
| (< LPAREN > Expr() < RPAREN >)
| NewExpr()
}

void NewExpr() #NewExpression:
{}
{
  (< NEW > ClassName() < LPAREN > < RPAREN >)
}

void Expr() :
{}
{
  LogicalExpr1()
}

void ClassName() #ClassName:
{}
{
	< ID >
}

void VarName() #VarName:
{}
{
	< ID >
}

void FuncName() #FuncName:
{}
{
	< ID >
}