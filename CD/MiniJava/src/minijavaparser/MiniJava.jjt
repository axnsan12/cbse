options
{
	LOOKAHEAD = 3;
	FORCE_LA_CHECK = true;
	CHOICE_AMBIGUITY_CHECK = 2;
	OTHER_AMBIGUITY_CHECK = 1;
	DEBUG_PARSER = true;
	
	TRACK_TOKENS = true;
	TOKEN_EXTENDS = "progen.Entity";
	
	NODE_CLASS = "progen.ProgenNode";
	NODE_EXTENDS = "progen.Entity";

	MULTI = true;
	VISITOR = true;
	NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(MiniJava)
package minijavaparser;

import java.io.*;

public class MiniJava
{	
	public static void main(String args[]) 
	{
	    System.err.println("Reading from standard input...");
	    try 
	    {
	      	MiniJava p = new MiniJava(new FileInputStream(new File("./samples/test01.java")));
	    	ASTProgram root = p.Program();
	    	root.dump(">");
			System.out.println("Thank you.");
	    } 
	    catch (Exception e) 
	    {									      
			System.err.println("Oops.");
			System.err.println(e.getMessage());
			e.printStackTrace();
	    }
	}
}
PARSER_END(MiniJava)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* KEYWORDS */
{
  <CLASS: "class">
| <PUBLIC: "public">
| <STATIC: "static">
| <VOID: "void">
| <MAIN: "main">
| <STRING: "String">
| <EXTENDS: "extends">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <PRINTLN: "System.out.println">
| <RETURN: "return">
| <INT: "int">
| <BOOLEAN: "boolean">
| <LENGTH: "length">
| <TRUE: "true">
| <FALSE: "false">
| <THIS: "this">
| <NEW: "new">
} 

TOKEN : /* IDENTIFIERS */
{
  < ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

TOKEN : /* LITERALS */
{
  < INT_LITERAL: ("-")? (<DIGIT>)+ >
}

TOKEN : /* OPERATORS */
{
  < BINARYOP1: ["+","-"] > |
  < BINARYOP2: ["*","/"] > |
  < ASSIGNOPERATOR: ":=" > |
  < NOTOPERATOR: "!" > |
  < DOT: "." >
}

TOKEN : /* SEPARATORS */
{
  <LBRACKET: "[">
| <RBRACKET: "]">
| <LPAREN: "(">
| <RPAREN: ")">
| <LACCOLADE: "{">
| <RACCOLADE: "}">
| <COMMA: ",">
| <SEMICOLON: ";">
}

ASTProgram Program() #Program: { }
{
	MainClass() ( ClassDecl() )* <EOF>
  	{
  		return jjtThis; 
  	}
}

void MainClass() #MainClass: { }
{
	<CLASS> <ID> <LACCOLADE> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET><RBRACKET> <ID> <RPAREN> 
		<LACCOLADE> Statement() <RACCOLADE>
	<RACCOLADE>
}

void ClassDecl() #ClassDeclaration: { }
{ 
	<CLASS> <ID> (<EXTENDS> <ID>)? <LACCOLADE> ( MethodDecl() | VarDecl() )* <RACCOLADE>
}

void MethodDecl() #MethodDeclaration: { }
{
	<PUBLIC> (<STATIC>)? ReturnType() <ID> <LPAREN> (ParamDecl())? (<COMMA> ParamDecl())* <RPAREN> 
	<LACCOLADE> ( VarDecl() | Statement() )* (<RETURN> (Expr())? <SEMICOLON>) #ReturnStatement <RACCOLADE>
}

void ReturnType(): { }
{
	(<VOID> | VarType())
}

void VarType(): { }
{
	(<STRING> | <BOOLEAN> | <INT> | <ID>)
}

void ParamDecl() #ParameterDeclaration: { }
{
	VarType() <ID>
}

void VarDecl() #VariableDeclaration: { }
{
	VarType() <ID> <SEMICOLON>
}

void Statement() #Statement: { }
{
	(<LACCOLADE> (Statement())* <RACCOLADE>)
	| (<IF> <LPAREN> Expr() <RPAREN> Statement() <ELSE> Statement()) #IfStatement
	| (<WHILE> <LPAREN> Expr() <RPAREN> Statement()) #WhileStatement
	| (<PRINTLN> <LPAREN> Expr() <RPAREN> <SEMICOLON>) #PrintStatement
	| (<ID> (<LBRACKET> Expr() <RBRACKET>)? <ASSIGNOPERATOR> Expr()) #AssignmentStatement
}

void PrimaryExpr(): { }
{
	<TRUE> | <FALSE> | <ID> | <THIS> | <INT_LITERAL>
	| (<NEW> <ID> <LPAREN><RPAREN>) 
	| (<NOTOPERATOR> Expr()) 
	| (<LPAREN> Expr() <RPAREN>)
}

void BinaryExpr1(): { }
{
	BinaryExpr2() (<BINARYOP1> BinaryExpr2())*
}

void BinaryExpr2(): { }
{
	PostExpr() (<BINARYOP2> PostExpr())*
}

void PostExpr(): { }
{
	PrimaryExpr() (
		(<LBRACKET> Expr() <RBRACKET>)
		| (<DOT> (
			<LENGTH> 
			| (<ID> <LPAREN> (Expr())? (<COMMA> Expr())* <RPAREN>)
		))
	)?
}

void Expr() #Expression: { }
{
	BinaryExpr1()
}